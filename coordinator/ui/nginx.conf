server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Proxy MCP bridge API calls to the backend
    # Handle both /mcp and /mcp/ (with or without trailing slash)
    location ~ ^/mcp(/.*)?$ {
        # Internal rewrite to backend API path
        rewrite ^/mcp/?(.*)$ /api/mcp/$1 break;

        proxy_pass http://hyperion-http-bridge:7095;
        proxy_http_version 1.1;

        # Forward only necessary headers (NOT Origin - handled by nginx CORS)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Request-ID $http_x_request_id;

        # Handle CORS at nginx level (works for ANY localhost port)
        # Validate origin is localhost before reflecting it
        set $cors_origin "";
        if ($http_origin ~* "^https?://localhost(:[0-9]+)?$") {
            set $cors_origin $http_origin;
        }

        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, X-Request-ID' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, X-Request-ID';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Disable buffering for real-time responses
        proxy_buffering off;
    }

    # Proxy health check to bridge
    location /bridge-health {
        proxy_pass http://hyperion-http-bridge:7095/health;
        proxy_http_version 1.1;

        # CORS headers for health check
        set $cors_origin "";
        if ($http_origin ~* "^https?://localhost(:[0-9]+)?$") {
            set $cors_origin $http_origin;
        }
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
    }

    # Proxy REST API calls to the backend
    location /api/ {
        proxy_pass http://hyperion-http-bridge:7095;
        proxy_http_version 1.1;

        # Forward necessary headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Request-ID $http_x_request_id;

        # Handle CORS at nginx level (works for ANY localhost port)
        # Validate origin is localhost before reflecting it
        set $cors_origin "";
        if ($http_origin ~* "^https?://localhost(:[0-9]+)?$") {
            set $cors_origin $http_origin;
        }

        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, X-Request-ID' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, X-Request-ID';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Disable buffering for real-time responses
        proxy_buffering off;
    }

    # SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
